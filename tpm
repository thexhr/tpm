#!/bin/sh
# Copyright (C) 2013-2016 SÃ¶ren Tempel
# Copyright (C) 2017 Matthias Schmidt
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

set -eu

umask 077

##
# Variables r/w
##

GPG_OPTS="--quiet --yes"
GPGB="gpg2"
TMPDIR="/tmp"
NUKE="rm"
PASSWORD_STORE_KEY=${PASSWORD_STORE_KEY:-""}
EDITOR=${EDITOR:-""}
TOPTS="-C"

##
# Variables r/o
##

readonly STORE_DIR="${HOME}/.password-store"
readonly PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin

##
# Helper
##

if [ -r "${STORE_DIR}/.gpg-id" ] && [ -z "${PASSWORD_STORE_KEY}" ]; then
  read -r PASSWORD_STORE_KEY < "${STORE_DIR}/.gpg-id"
fi

usage() {
	echo "Usage: $(basename $0) [option] [argument]"
	echo
	echo "Option can be one of the following"
	echo
	echo "	show <entry>		Shows password <entry>"
	echo "	insert <entry>		Inserts new <entry>"
	echo "	find <entry>		Searches for <entry>"
	echo "	rm <entry>			Removes <entry>"
	echo
	echo "If you do not specify an option, all entries will be shown"
	exit 0
}

abort() {
	echo "$(basename ${0}): ${1}" 1>&2
	exit 1
}

mygpg() {

	if [ -z "$(which gpg2 2> /dev/null)" ]; then
		if [ -z "$(which gpg 2> /dev/null)" ]; then
			abort "gpg or gpg2 not found.  Please install."
		else
			GPGB="gpg"
		fi
	fi

	if [ -n "${PASSWORD_STORE_KEY}" ]; then
		${GPGB} ${GPG_OPTS} --recipient "${PASSWORD_STORE_KEY}" "$@"
	else
		${GPGB} ${GPG_OPTS} --default-recipient-self "$@"
	fi

	return $?
}

readpw() {
  if [ -t 0 ]; then
    printf "%s" "${1}"
    stty -echo
  fi

  IFS= read -r "${2}"
  [ -t 0 ] && stty echo
}

entry_exists() {
	local _entry_name="${1}"
	local _entry_path="${STORE_DIR}/${_entry_name}.gpg"

	if [ ! -f "${_entry_path}" ]; then
		abort "The requested entry doesn't exist."
	fi
}

choose_tmp() {
	# Create the temp file on a shared memory fs if available
	if [ -d "/dev/shm" -a -k "/dev/shm" ]; then
		TMPDIR="/dev/shm"
	fi
}

nuke_file() {
	OSV=$(uname -s)

	if [ -n ${OSV} ]; then
		if [ "${OSV}" = "Linux" ]; then
			NUKE="shred -u"
		elif [ "${OSV}" = "OpenBSD" -o "${OSV}" = "FreeBSD" -o "${OSV}" = "DragonFly" -o "${OSV}" = "NetBSD" ]; then
			NUKE="rm -P"
		fi
	fi
}

##
# Commands
##

show() {
  local _entry_name="${1}"
  local _entry_path="${STORE_DIR}/${_entry_name}.gpg"

  if [ -z "${_entry_name}" ]; then
    abort "show needs an argument"
  fi

  entry_exists ${_entry_name}

  mygpg --decrypt "${_entry_path}" || abort "Cannot open entry"
}

insert() {
  local _entry_name="${1}"
  local _entry_path="${STORE_DIR}/${_entry_name}.gpg"

  if [ -z "${_entry_name}" ]; then
    abort "insert needs an argument"
  fi

  if [ -f "${_entry_path}" ]; then
    abort "This entry already exists"
  fi

  password=""
  readpw "Password for '${_entry_name}': " password
  if [ -t 0 ]; then
    printf "\n"
  fi

  if [ -z "${password}" ]; then
    abort "You didn't specify a password."
  fi

  command mkdir -p "${_entry_path%/*}" || abort "Cannot create password entry"
  printf '%s\n' "${password}" | mygpg --encrypt \
    --output "${_entry_path}"
}

show_all() {
	${TREE} -l -x --noreport $TOPTS "${STORE_DIR}" -P "*.gpg" --prune | sed 's/\.gpg//'
}

remove_entry() {
	local _entry_name="${1}" _answer

	[ -z "${_entry_name}" ] && abort "rm needs an argument"

	entry_exists ${_entry_name}

	echo -n "$0: Really remove ${_entry_name} [y/N]? "
	read -r _answer
	case "${_answer}" in
		[yY]) 	command ${NUKE} -f "${STORE_DIR}/${_entry_name}.gpg" ;;
		*) 		;;
	esac
}

find_entry() {
	local _entry_name="${1}"

	[ -z "${_entry_name}" ] && abort "find needs an argument"
	${TREE} -l -x --noreport $TOPTS "${STORE_DIR}/" -P "*${_entry_name}*" --prune \
		--matchdirs --ignore-case | sed 's/\.gpg//'
	echo
}

edit_entry() {
	local _entry_name="${1}" _tmpfile

	[ -z "${_entry_name}" ] && abort "edit needs an argument"

	entry_exists ${_entry_name}

	choose_tmp
	_tmpfile=$(mktemp ${TMPDIR}/tpm.XXXXXXXXXX) || abort "Cannot create temporary file"
	trap "${NUKE} -f ${_tmpfile}; exit 0" 0 1 2 3 15

	mygpg --output ${_tmpfile} --decrypt "${STORE_DIR}/${_entry_name}.gpg" || \
		abort "Cannot edit file"

	if [ -n "${EDITOR}" ]; then
		${EDITOR} ${_tmpfile} || abort "Cannot open file using \$EDITOR"
	else
		vi ${_tmpfile} || abort "Neither vi or an editor in \$EDITOR was found"
	fi

	mygpg --output "${STORE_DIR}/${_entry_name}.gpg" --encrypt ${_tmpfile} || \
		abort "Cannot re-encrypt temporary file"

	# If the file is there, remove it
	[ -e "${_tmpfile}"  ] && ${NUKE} -f "${_tmpfile}"
}

##
# Parse input
##

set +u
[ "${1}" != "insert" -a ! -d "${STORE_DIR}" ] && abort "Password directory does not exist."

# Disable colors for colortree if NO_COLOR is set
[[ -n $NO_COLOR ]] && TOPTS="-n"
set -u

if [ ! -z "$(which colortree 2> /dev/null)" ]; then
	TREE=colortree
elif [ ! -z "$(which tree 2> /dev/null)" ]; then
	TREE=tree
else
	abort "tpm needs tree or colortree to run. Please install"
fi

if [ $# -eq 0 ]; then
	show_all
	exit 0
elif [ $# -gt 2 ]; then
  abort "tpm doesn't accept more than two arguments."
fi

case "${1}" in
  "show")   show   "${2}" ;;
  "insert") insert "${2}" ;;
  "find")	find_entry "${2}" ;;
  "rm")		remove_entry "${2}" ;;
  "edit")	edit_entry "${2}" ;;
  "help")	usage ;;
  *)   		show   "${1}" ;;
esac

exit 0
